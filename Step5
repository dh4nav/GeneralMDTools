#!/usr/bin/env python

import sys
sys.path.extend(["/home/hpc/bca1/bca109/bin/GeneralMDTools", "/home/t/Source/GeneralMDTools"])

#import AtomEnsemble as ae
import os
import automationtools as at
import subprocess as sp
if 'PBS_O_WORKDIR' in os.environ:
    os.chdir(os.environ['PBS_O_WORKDIR'])
# import fieldtools as ft
# import iotools as iot
# import random
# #import numpy as np
#
# def frand(minval=0.0, maxval=1.0):
#     return random.uniform(minval, maxval)
#
# #seed random
# random.seed()
#
# at.check_and_write_error(["HISTORY", "CONTROL5", "CONTROL5R", "REVCON"], postfix="step5_pre")
# at.check_and_move(["OUTPUT", "STATIS"], "step5_pre")
# #Get index
# #index = int(sys.argv[1])
#
# #Load last frame
# last_frame = iot.DLP2HReader(fileobj="HISTORY")[-1]
#
# #construct field file
# ff = ft.FieldCollection(input_file="FIELD_vdw_plus")
# for index, atom in enumerate(last_frame['element']):
#     if atom == "BI":
#         ff.append_molecule("FIELD_Mol_BI")
#     elif atom == "OI":
#         ff.append_molecule("FIELD_Mol_OI")
#     elif atom == "OH":
#         ff.append_molecule("FIELD_Mol_OH")
#     elif atom == "NN":
#         ff.append_molecule("FIELD_Mol_NO3")
#     elif atom == "SD":
#         ff.append_molecule("FIELD_Mol_DMSO")
#     elif atom == "OW":
#         ff.append_molecule("FIELD_Mol_H2O")
#
# field_out = open("FIELD", "w")
# field_out.write(str(ff))
# field_out.close()
#
# field_out = open("FIELD5", "w")
# field_out.write(str(ff))
# field_out.close()

# conf_writer = iot.DLP2CWriter(fileobj="CONFIG", overwrite=True)
# conf_writer.write(last_frame)
# del conf_writer
#
# conf_writer = iot.DLP2CWriter(fileobj="CONFIG5", overwrite=True)
# conf_writer.write(last_frame)
# del conf_writer



#start step6

os.system("cp FIELD_free FIELD")
os.system("cp CONTROL5b1 CONTROL")
at.check_and_move(["OUTPUT", "HISTORY", "STATIS", "REVIVE"], "step4")
at.check_and_copy(["REVCON"], "step4")
os.system("mv REVCON CONFIG")
sp.Popen("${PBS_O_WORKDIR}/shellstarter", shell=True, env=os.environ, stdout=sp.PIPE, stderr=sp.PIPE).communicate()

os.system("cp CONTROL5b2 CONTROL")
at.check_and_move(["OUTPUT", "HISTORY", "STATIS", "REVIVE"], "step5_1")
at.check_and_copy(["REVCON"], "step5_1")
os.system("mv REVCON CONFIG")
sp.Popen("${PBS_O_WORKDIR}/shellstarter", shell=True, env=os.environ, stdout=sp.PIPE, stderr=sp.PIPE).communicate()

os.system("cp CONTROL5b3 CONTROL")
at.check_and_move(["OUTPUT", "HISTORY", "STATIS", "REVIVE"], "step5_2")
at.check_and_copy(["REVCON"], "step5_2")
os.system("mv REVCON CONFIG")
sp.Popen("${PBS_O_WORKDIR}/shellstarter", shell=True, env=os.environ, stdout=sp.PIPE, stderr=sp.PIPE).communicate()

os.system("cp CONTROL5b4 CONTROL")
at.check_and_move(["OUTPUT", "HISTORY", "STATIS", "REVIVE"], "step5_3")
at.check_and_copy(["REVCON"], "step5_3")
os.system("mv REVCON CONFIG")
sp.Popen("${PBS_O_WORKDIR}/shellstarter", shell=True, env=os.environ, stdout=sp.PIPE, stderr=sp.PIPE).communicate()

os.system("cp CONTROL5b5 CONTROL")
at.check_and_move(["OUTPUT", "HISTORY", "STATIS", "REVIVE"], "step5_4")
at.check_and_copy(["REVCON"], "step5_4")
os.system("mv REVCON CONFIG")
sp.Popen("${PBS_O_WORKDIR}/shellstarter", shell=True, env=os.environ, stdout=sp.PIPE, stderr=sp.PIPE).communicate()

os.system("cp CONTROL5 CONTROL")
at.check_and_move(["OUTPUT", "HISTORY", "STATIS", "REVIVE"], "step5_5")
at.check_and_copy(["REVCON"], "step5_5")
os.system("mv REVCON CONFIG")

os.system('qsub -l nodes=5:ppn=40,walltime=2:00:00 -N step6 -W depend=afterany:'+ os.environ['PBS_JOBID'] + ' /home/hpc/bca1/bca109/bin/GeneralMDTools/Step6')
