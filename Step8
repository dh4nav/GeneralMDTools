#!/usr/bin/env python

import sys
sys.path.extend(["/home/hpc/bca1/bca109/bin/GeneralMDTools", "/home/t/Source/GeneralMDTools"])

#import AtomEnsemble as ae
import os
import automationtools as at
if 'PBS_O_WORKDIR' in os.environ:
    os.chdir(os.environ['PBS_O_WORKDIR'])
#import sys
import fieldtools as ft
import iotools as iot
import random
import subprocess as sp
#import numpy as np

run_length = 2000000 # number of simulation frames to run before we quit

def frand(minval=0.0, maxval=1.0):
    return random.uniform(minval, maxval)

#seed random
random.seed()
at.check_and_write_error(["HISTORY", "CONTROL5", "CONTROL5R"], postfix="step8_pre")
#at.check_and_move(["OUTPUT", "STATIS", "REVCON"], "step8_pre")

def recurse_make_water(frame):
    pairs = frame.get_approaches("OH", "HH", 1.5, 2.0)
    if len(pairs) == 0:
        return True
    else:
        o_pos = pairs[0][0]
        h_pos = pairs[0][1]

        h = frame[h_pos].copy()
        h['element'] = 'HW'
        frame[h_pos-1]['element'] = 'OI'
        frame[o_pos]['element'] = 'OW'
        frame[o_pos+1]['element'] = 'HW'
        frame.main_list.insert(o_pos+2, h)
        del frame.main_list[h_pos]

        #continue here if we ever need to fix the angles
        #if o_pos > h_pos:
        #    o_pos -= 1
        #...

        return recurse_make_water(frame)

#Get index
#index = int(sys.argv[1])

#Load last frame
last_frame_reader = iot.DLP2HReader(fileobj="HISTORY")

for f in last_frame_reader:
    if len(f.get_approaches("OH", "HH", 1.5, 2.0)) != 0:
        os.system("mkdir 8minus")
        os.system("mkdir 8plus")

        config_minus_writer = iot.DLP2CWriter(fileobj="8minus/CONFIG", overwrite=True)
        config_minus_writer.write(f)
        del config_minus_writer
        os.system("cp FIELD 8minus")
        #os.system("cp STATIS 8minus")
        os.system("cp CONTROL8 8minus/CONTROL")
        os.system("cp CONTROL8 8plus/CONTROL")
        os.system("cp shellstarter 8minus")
        os.system("cp shellstarter 8plus")
        recurse_make_water(f)

        ff = ft.FieldCollection(input_file="FIELD_vdw_plus")
        for index, atom in enumerate(f['element']):
            if atom == "BI":
                ff.append_molecule("FIELD_Mol_BI_fixed")
            elif atom == "OI":
                ff.append_molecule("FIELD_Mol_OI_fixed")
            elif atom == "OH":
                ff.append_molecule("FIELD_Mol_OH_fixed")
            elif atom == "NN":
                ff.append_molecule("FIELD_Mol_NO3_fixed")
            elif atom == "SD":
                ff.append_molecule("FIELD_Mol_DMSO_fixed")
            elif atom == "OW":
                ff.append_molecule("FIELD_Mol_H2O")

        field_out = open("8plus/FIELD", "w")
        field_out.write(str(ff))
        field_out.close()

        # field_out = open("FIELD8", "w")
        # field_out.write(str(ff))
        # field_out.close()

        conf_writer = iot.DLP2CWriter(fileobj="8plus/CONFIG", overwrite=True)
        conf_writer.write(f)
        del conf_writer

        os.chdir("8plus")
        sp.Popen("${PBS_O_WORKDIR}/shellstarter", shell=True, env=os.environ, stdout=sp.PIPE, stderr=sp.PIPE).communicate()
        os.chdir("8minus")
        sp.Popen("${PBS_O_WORKDIR}/shellstarter", shell=True, env=os.environ, stdout=sp.PIPE, stderr=sp.PIPE).communicate()

        #FIXME cont here

        # conf_writer = iot.DLP2CWriter(fileobj="CONFIG8", overwrite=True)
        # conf_writer.write(f)
        # del conf_writer

        os.system("rm timecounter")
        os.system("cp CONTROL8 CONTROL")
        at.check_and_move(["OUTPUT", "HISTORY", "STATIS", "CONFIG"], "step8")
        at.check_and_copy(["CONFIG"], "step8")
        os.system('qsub -l nodes=5:ppn=40,walltime=4:00:00 -N step6 -W depend=afterany:'+ os.environ['PBS_JOBID'] + ' /home/hpc/bca1/bca109/bin/GeneralMDTools/Step2')
        exit()

    # why are we here? There's a problem somewhere
