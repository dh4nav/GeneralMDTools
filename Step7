#!/usr/bin/env python

import sys
sys.path.extend(["/home/hpc/bca1/bca109/bin/GeneralMDTools", "/home/t/Source/GeneralMDTools"])

#import AtomEnsemble as ae
import os
import automationtools as at

group = ""
configfile = ""
group, configfile, cp = at.argsinit()

at.check_and_move(cp.get(group, "move").split(), group)
at.check_and_copy(cp.get(group, "copy").split(), group)
#import sys
import fieldtools as ft
import iotools as iot
import random

import subprocess as sp

at.mangle_config(configfile, group)
#import numpy as np

# from mpi4py import MPI
# comm = MPI.COMM_WORLD
# rank = comm.Get_rank()

run_length = 20000000 # number of simulation frames to run before we quit

def frand(minval=0.0, maxval=1.0):
    return random.uniform(minval, maxval)

def recurse_make_water(frame):
    pairs = frame.get_approaches("OH", "HH", 1.5, 2.0)
    if len(pairs) == 0:
        return True
    else:
        o_pos = pairs[0][0]
        h_pos = pairs[0][1]

        h = frame[h_pos].copy()
        h['element'] = 'HW'
        frame[h_pos-1]['element'] = 'OI'
        frame[o_pos]['element'] = 'OW'
        frame[o_pos+1]['element'] = 'HW'
        frame.main_list.insert(o_pos+2, h)
        del frame.main_list[h_pos]

        #continue here if we ever need to fix the angles
        #if o_pos > h_pos:
        #    o_pos -= 1
        #...

        return recurse_make_water(frame)

if 1: #rank == 0:

    #seed random
    random.seed()
    #at.check_and_move(["OUTPUT", "STATIS", "REVCON"], "step7_pre")

    #Get index
    #index = int(sys.argv[1])

    #Load last frame
    last_frame_reader = iot.DLP2HReader(fileobj="HISTORY")
    last_frame = last_frame_reader[-1]

    timecounter = 0
    if os.path.isfile("timecounter"):
        with open("timecounter") as f:
            timecounter = int(f.readline().strip())

    if timecounter > run_length:
        sys.exit(1) #quit
    else:
        for n, f in enumerate(last_frame_reader):
            if n >= timecounter:
                print n
                f.filter(keep=["OH", "HH"])
                applen = len(f.get_approaches("OH", "HH", 1.5, 2.0))
                print "S " + str(n) + " " + str(applen)
                if applen != 0:
                    # H Bridge

                    os.system("mkdir 8minus")
                    os.system("mkdir 8plus")

                    config_minus_writer = iot.DLP2CWriter(fileobj="8minus/CONFIG", overwrite=True)
                    config_minus_writer.write(f)
                    del config_minus_writer
                    os.system("cp FIELD 8minus")
                    #os.system("cp STATIS 8minus")
                    os.system("cp CONTROL 8minus/CONTROL")
                    os.system("cp CONTROL 8plus/CONTROL")
                    os.system("cp shellstarter 8minus")
                    os.system("cp shellstarter 8plus")
                    recurse_make_water(f)
                    conf_writer = iot.DLP2CWriter(fileobj="8plus/CONFIG", overwrite=True)
                    conf_writer.write(f)
                    del conf_writer

                    ff = ft.FieldCollection(input_file="FIELD_vdw_plus")
                    for index, atom in enumerate(f['element']):
                        if atom == "BI":
                            ff.append_molecule("FIELD_Mol_BI_fixed")
                        elif atom == "OI":
                            ff.append_molecule("FIELD_Mol_OI_fixed")
                        elif atom == "OH":
                            ff.append_molecule("FIELD_Mol_OH_fixed")
                        elif atom == "NN":
                            ff.append_molecule("FIELD_Mol_NO3_fixed")
                        elif atom == "SD":
                            ff.append_molecule("FIELD_Mol_DMSO_fixed")
                        elif atom == "OW":
                            ff.append_molecule("FIELD_Mol_H2O")

                    field_out = open("8plus/FIELD", "w")
                    field_out.write(str(ff))
                    field_out.close()

                    ff = ft.FieldCollection(input_file="FIELD_vdw_plus")
                    for index, atom in enumerate(f['element']):
                        if atom == "BI":
                            ff.append_molecule("FIELD_Mol_BI")
                        elif atom == "OI":
                            ff.append_molecule("FIELD_Mol_OI")
                        elif atom == "OH":
                            ff.append_molecule("FIELD_Mol_OH")
                        elif atom == "NN":
                            ff.append_molecule("FIELD_Mol_NO3")
                        elif atom == "SD":
                            ff.append_molecule("FIELD_Mol_DMSO")
                        elif atom == "OW":
                            ff.append_molecule("FIELD_Mol_H2O")

                    field_out = open("8plus/FIELD_free", "w")
                    field_out.write(str(ff))
                    field_out.close()

                    # field_out = open("FIELD8", "w")
                    # field_out.write(str(ff))
                    # field_out.close()

                    conf_writer = iot.DLP2CWriter(fileobj="8plus/CONFIG", overwrite=True)
                    conf_writer.write(f)
                    del conf_writer

                    os.chdir("8plus")
                    sp.Popen("${PBS_O_WORKDIR}/shellstarter", shell=True, env=os.environ, stdout=sp.PIPE, stderr=sp.PIPE).communicate()
                    os.chdir("8minus")
                    sp.Popen("${PBS_O_WORKDIR}/shellstarter", shell=True, env=os.environ, stdout=sp.PIPE, stderr=sp.PIPE).communicate()

                    stlplus = ""
                    stlminus = ""

                    with open("8minus/STO") as fminus:
                        for stlminus in fminus:
                            pass

                    with open("8plus/STO") as fplus:
                        for stlplus in fplus:
                            pass

                    eminus = float(stlminus.strip().split()[5])
                    eplus = float(stlplus.strip().split()[5])

                    if eminus > (eplus + 7.0):
                        at.check_and_move(["OUTPUT", "HISTORY", "STATIS", "REVIVE", "CONFIG", "FIELD", "REVCON"], "step7++")
                        os.system("mv 8plus/FIELD FIELD")
                        os.system("mv 8plus/REVCON REVCON")
                        os.system("mv 8plus/FIELD_free FIELD_free")
                        os.system("cp FIELD_free FIELD")
                        os.system("rm -r 8plus 8minus")

                        with open("timecounter", "w") as f:
                            f.write("0") #reset time
                        at.pbs_runner(configfile, group)

                        sys.exit(0)

                    else:
                        os.system("rm -r 8plus 8minus")

        timecounter += len(last_frame_reader)
        with open("timecounter", "w") as f:
            f.write(str(timecounter))

        at.pbs_runner(configfile, group)
        sys.exit(0)
        #step6

# elif rank > 0:
#     while 1:
#         if comm.Iprobe(source=0, tag=1):
#             data = comm.recv(source=0, tag=1)
#
#             comm.send(data, dest=0, tag=2)
