#!/usr/bin/env python

import sys
sys.path.extend(["/home/hpc/bca1/bca109/bin/GeneralMDTools", "/home/t/Source/GeneralMDTools"])

#Check if add cluster has docked onto the center cluster

#import AtomEnsemble as ae

import os

os.chdir(os.environ['PBS_O_WORKDIR'])

#import sys
import fieldtools as ft
import iotools as iot
import random
#import numpy as np

def frand(minval=0.0, maxval=1.0):
    return random.uniform(minval, maxval)

#seed random
random.seed()

#Get index
#index = int(sys.argv[1])

#Load last frame
last_frame = iot.DLP2HReader(fileobj="HISTORY")[-1]

# check if aggregation has occurred. If yes solvate, if not rinse and repeat
print "LFD" + str(last_frame.get_chains(dist=3.5))
if last_frame.get_chains(dist=3.5) != 1:
    os.system("mv REVCON CONFIG; mv REVIVE REVOLD; mv HISTORY HISTORY2; mv OUTPUT OUTPUT2; mv STATIS STATIS2")
    # start step2
    os.system('cp CONTROL1R CONTROL; qsub -l nodes=2:ppn=40,walltime=1:00:00  -N step2 -W depend=afterany:'+ os.environ['PBS_JOBID'] + ' /home/hpc/bca1/bca109/bin/GeneralMDTools/Step2')
else:
    solvate_hull = iot.DLP2HReader(fileobj="SolvateHull")[0]
    len_last_frame = len(last_frame['element'])
    last_frame.center()

    try:
        del last_frame['velocity']
    except KeyError:
        pass

    try:
        del last_frame['force']
    except KeyError:
        pass

    try:
        del solvate_hull['velocity']
    except KeyError:
        pass

    try:
        del solvate_hull['force']
    except KeyError:
        pass

    #solvate_hull.center()
    last_frame.intersect_molecules(solvate_hull, 3.5, 4)

    #construct field file
    ff = ft.FieldCollection(input_file="FIELD_vdw_plus")
    for index, atom in enumerate(last_frame['element']):
        if index < len_last_frame:
            if atom == "BI":
                ff.append_molecule("FIELD_Mol_BI_fixed")
            elif atom == "OI":
                ff.append_molecule("FIELD_Mol_OI_fixed")
            elif atom == "OH":
                ff.append_molecule("FIELD_Mol_OH_fixed")
            elif atom == "NN":
                ff.append_molecule("FIELD_Mol_NO3_fixed")
            elif atom == "SD":
                ff.append_molecule("FIELD_Mol_DMSO_fixed")
            elif atom == "OW":
                ff.append_molecule("FIELD_Mol_H2O_fixed")
        else:
            if atom == "BI":
                ff.append_molecule("FIELD_Mol_BI")
            elif atom == "OI":
                ff.append_molecule("FIELD_Mol_OI")
            elif atom == "OH":
                ff.append_molecule("FIELD_Mol_OH")
            elif atom == "NN":
                ff.append_molecule("FIELD_Mol_NO3")
            elif atom == "SD":
                ff.append_molecule("FIELD_Mol_DMSO")
            elif atom == "OW":
                ff.append_molecule("FIELD_Mol_H2O")

    field_out = open("FIELD", "w")
    field_out.write(str(ff))
    field_out.close()

    field_out = open("FIELD3", "w")
    field_out.write(str(ff))
    field_out.close()

    last_frame.boxvector = solvate_hull.boxvector

    conf_writer = iot.DLP2CWriter(fileobj="CONFIG", overwrite=True)
    conf_writer.write(last_frame)
    del conf_writer

    os.system("cp CONFIG CONFIG3")

    os.system('cp CONTROL3 CONTROL; qsub -l nodes=5:ppn=40,walltime=4:00:00 -N step4 -W depend=afterany:'+ os.environ['PBS_JOBID'] + ' /home/hpc/bca1/bca109/bin/GeneralMDTools/Step4')
    # start 4
